[
  {
    "time": "2025-05-16T23:01:04.556639",
    "req": {
      "premises-NL": [
        "All particles can exist in a superposition of states until measured.",
        "If a particle is in a superposition of states, it can tunnel through barriers.",
        "When two particles are entangled, measuring one instantly changes the state of the other.",
        "Measuring a particle collapses its state to a definite state."
      ],
      "questions": "What can we conclude about a particle in a superposition state?\nA. It can tunnel through barriers.\nB. It is always entangled with another particle.\nC. Its state cannot be collapsed by measurement.\nD. It exists in a definite state."
    },
    "err": "Error: mat1 and mat2 shapes cannot be multiplied (569x57 and 6x18944), Traceback (most recent call last):\n  File \"/home/manh/Projects/QAChallenge/api/main.py\", line 194, in generate\n    choice_results  = choice_pipeline.run(premises=premises, question=question, tokenizer=tokenizer, model=model, trace=True)\n  File \"/home/manh/Projects/QAChallenge/api/choice_pipeline_3.py\", line 143, in run\n    finalize_response = self.generate_answer(tokenizer=tokenizer, model=model, messages=messages, max_new_tokens= 2000)\n  File \"/home/manh/Projects/QAChallenge/api/choice_pipeline_3.py\", line 56, in generate_answer\n    output = model.generate(\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/utils/_contextlib.py\", line 116, in decorate_context\n    return func(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/transformers/generation/utils.py\", line 2465, in generate\n    result = self._sample(\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/transformers/generation/utils.py\", line 3431, in _sample\n    outputs = self(**model_inputs, return_dict=True)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1739, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1750, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/transformers/utils/generic.py\", line 965, in wrapper\n    output = func(self, *args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/transformers/utils/deprecation.py\", line 172, in wrapped_func\n    return func(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/transformers/models/qwen2/modeling_qwen2.py\", line 823, in forward\n    outputs: BaseModelOutputWithPast = self.model(\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1739, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1750, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/transformers/utils/generic.py\", line 965, in wrapper\n    output = func(self, *args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/transformers/models/qwen2/modeling_qwen2.py\", line 549, in forward\n    layer_outputs = decoder_layer(\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1739, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1750, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/transformers/models/qwen2/modeling_qwen2.py\", line 278, in forward\n    hidden_states = self.mlp(hidden_states)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1739, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1750, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/transformers/models/qwen2/modeling_qwen2.py\", line 59, in forward\n    down_proj = self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1739, in _wrapped_call_impl\n    return self._call_impl(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/nn/modules/module.py\", line 1750, in _call_impl\n    return forward_call(*args, **kwargs)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/bitsandbytes/nn/modules.py\", line 990, in forward\n    out = bnb.matmul(x, self.weight, bias=self.bias, state=self.state)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/bitsandbytes/autograd/_functions.py\", line 509, in matmul\n    return MatMul8bitLt.apply(A, B, out, bias, state)\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/torch/autograd/function.py\", line 575, in apply\n    return super().apply(*args, **kwargs)  # type: ignore[misc]\n  File \"/home/manh/miniconda3/envs/QA-host/lib/python3.10/site-packages/bitsandbytes/autograd/_functions.py\", line 380, in forward\n    output = output.addmm(subA, state.subB)\nRuntimeError: mat1 and mat2 shapes cannot be multiplied (569x57 and 6x18944)\n"
  }
]